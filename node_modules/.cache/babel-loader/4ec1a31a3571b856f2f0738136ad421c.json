{"ast":null,"code":"import _initializerDefineProperty from \"F:\\\\train\\\\train-ticket\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"F:\\\\train\\\\train-ticket\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"F:\\\\train\\\\train-ticket\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;\n\nimport { observable, action } from \"mobx\";\nlet IndexStore = (_class = (_temp = class IndexStore {\n  constructor() {\n    _initializerDefineProperty(this, \"from\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"to\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"station\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"cityList\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"exchangeStation\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"changeStation\", _descriptor6, this);\n  }\n\n  getCityList() {\n    return fetch('/getCity').then(response => {\n      return response.json().then(res => {\n        this.cityList = res.resultCode === 0 ? res.result : [];\n        return res;\n      });\n    }).catch(err => {\n      console.log(err, '000-err');\n    });\n  }\n\n  getSearchCityList(val) {\n    let searchList = [];\n    this.cityList.forEach(item => {\n      item.cities.forEach(city => {\n        if (city.name.indexOf(val) > -1) {\n          searchList.push(city);\n        }\n      });\n    });\n    console.log(val, searchList, '000-store');\n    return searchList;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"from\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"北京\";\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"to\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return \"上海\";\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"station\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"cityList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"exchangeStation\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      let temp = this.from;\n      this.from = this.to;\n      this.to = temp;\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getCityList\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getCityList\"), _class.prototype), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"changeStation\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return val => {\n      this.station === 'to' ? this.to = val : this.from = val;\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"getSearchCityList\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"getSearchCityList\"), _class.prototype)), _class);\nconst index = new IndexStore();\nexport default index;","map":{"version":3,"sources":["F:\\train\\train-ticket\\src\\store\\index.tsx"],"names":["observable","action","IndexStore","getCityList","fetch","then","response","json","res","cityList","resultCode","result","catch","err","console","log","getSearchCityList","val","searchList","forEach","item","cities","city","name","indexOf","push","temp","from","to","station","index"],"mappings":";;;;;;AACA,SAASA,UAAT,EAA2BC,MAA3B,QAAkE,MAAlE;IAGMC,U,sBAAN,MAAMA,UAAN,CAAiB;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAYPC,EAAAA,WAAR,GAAqB;AACjB,WAAOC,KAAK,CAAC,UAAD,CAAL,CAAkBC,IAAlB,CAAwBC,QAAD,IAAc;AAC1C,aAAOA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBG,GAAD,IAAS;AACnC,aAAKC,QAAL,GAAgBD,GAAG,CAACE,UAAJ,KAAmB,CAAnB,GAAuBF,GAAG,CAACG,MAA3B,GAAoC,EAApD;AACA,eAAOH,GAAP;AACD,OAHM,CAAP;AAKD,KANM,EAMJI,KANI,CAMGC,GAAD,IAAS;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,SAAjB;AACD,KARM,CAAP;AASH;;AAMOG,EAAAA,iBAAR,CAA0BC,GAA1B,EAAsC;AACpC,QAAIC,UAAsB,GAAG,EAA7B;AACA,SAAKT,QAAL,CAAcU,OAAd,CAAuBC,IAAD,IAAmB;AACvCA,MAAAA,IAAI,CAACC,MAAL,CAAYF,OAAZ,CAAqBG,IAAD,IAAU;AAC5B,YAAIA,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkBP,GAAlB,IAAyB,CAAC,CAA9B,EAAiC;AAC/BC,UAAAA,UAAU,CAACO,IAAX,CAAgBH,IAAhB;AACD;AACF,OAJD;AAKD,KAND;AAOAR,IAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,EAAiBC,UAAjB,EAA6B,WAA7B;AACA,WAAOA,UAAP;AACD;;AAvCc,C,8EACdlB,U;;;;;WAA0B,I;;sEAC1BA,U;;;;;WAAwB,I;;2EACxBA,U;;;;;WAA6B,E;;4EAC7BA,U;;;;;WAAsB,E;;mFAEtBC,M;;;;;WAAyB,MAAY;AACpC,UAAIyB,IAAI,GAAG,KAAKC,IAAhB;AACA,WAAKA,IAAL,GAAY,KAAKC,EAAjB;AACA,WAAKA,EAAL,GAAUF,IAAV;AACD,K;;gEAEAzB,M,qKAYAA,M;;;;;WAAwBgB,GAAD,IAAiB;AACvC,WAAKY,OAAL,KAAiB,IAAjB,GAAwB,KAAKD,EAAL,GAAUX,GAAlC,GAAwC,KAAKU,IAAL,GAAYV,GAApD;AACD,K;;sEAEAhB,M;AAcH,MAAM6B,KAAK,GAAG,IAAI5B,UAAJ,EAAd;AACA,eAAe4B,KAAf","sourcesContent":["import React from \"react\";\r\nimport { observable, toJS, action, autorun, when, reaction } from \"mobx\";\r\nimport { CityInfo, CityObj } from '../models/index';\r\n\r\nclass IndexStore {\r\n  @observable from: string = \"北京\";\r\n  @observable to: string = \"上海\";\r\n  @observable station: string = '';\r\n  @observable cityList = [];\r\n\r\n  @action exchangeStation = (): void => {\r\n    let temp = this.from;\r\n    this.from = this.to;\r\n    this.to = temp;\r\n  };\r\n\r\n  @action getCityList(){\r\n      return fetch('/getCity').then((response) => {\r\n        return response.json().then((res) => {\r\n          this.cityList = res.resultCode === 0 ? res.result : []; \r\n          return res;\r\n        });\r\n        \r\n      }).catch((err) => {\r\n        console.log(err, '000-err')\r\n      });\r\n  }\r\n\r\n  @action changeStation = (val: string) => {\r\n    this.station === 'to' ? this.to = val : this.from = val;\r\n  };\r\n\r\n  @action getSearchCityList(val: string){\r\n    let searchList: CityInfo[] = [];\r\n    this.cityList.forEach((item: CityObj) => {\r\n      item.cities.forEach((city) => {\r\n        if (city.name.indexOf(val) > -1) {\r\n          searchList.push(city);\r\n        }\r\n      })\r\n    })\r\n    console.log(val, searchList, '000-store')\r\n    return searchList;\r\n  }\r\n}\r\n\r\nconst index = new IndexStore();\r\nexport default index;"]},"metadata":{},"sourceType":"module"}