{"ast":null,"code":"import \"antd-mobile/lib/button/style/css\";\nimport _Button from \"antd-mobile/lib/button\";\nimport _initializerDefineProperty from \"/train/train-ticket/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/train/train-ticket/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/train/train-ticket/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class,\n    _descriptor,\n    _descriptor2,\n    _temp,\n    _class3,\n    _jsxFileName = \"/train/train-ticket/src/pages/Add/index.tsx\",\n    _class4;\n\nimport React from 'react';\nimport { observable, computed, action } from \"mobx\";\nimport { observer } from 'mobx-react';\nimport './index.scss'; // 定义数据Store,用Mobx作为状态管理工具\n\nlet Store = (_class = (_temp = class Store {\n  constructor() {\n    _initializerDefineProperty(this, \"queue\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"refresh\", _descriptor2, this);\n  }\n\n  get fooProps() {\n    return {\n      queue: this.queue,\n      refresh: this.refresh\n    };\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"queue\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 1;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"refresh\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      this.queue += 1;\n      console.log('this.queue -> ', this.queue);\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"fooProps\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"fooProps\"), _class.prototype)), _class); // ts组件接收父组件传递过来的数据必须定义接口类型,否则报错\n\n// @observer修饰类,Bar组件接受Foo组建传过来的queue属性\nlet Bar = observer(_class3 = class Bar extends React.Component {\n  render() {\n    const queue = this.props.queue;\n    return React.createElement(\"div\", {\n      className: \"queue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, queue);\n  }\n\n}) || _class3;\n\n// Foo组件接收来自Add组件的store数据\nlet Foo = observer(_class4 = class Foo extends React.Component {\n  render() {\n    const _this$props = this.props,\n          queue = _this$props.queue,\n          refresh = _this$props.refresh;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(_Button, {\n      type: \"primary\",\n      onClick: refresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Refresh\"), React.createElement(Bar, {\n      queue: queue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }));\n  }\n\n}) || _class4; // 初始化store数据,传递给Foo组件\n\n\nconst store = new Store();\n\nclass Add extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"add\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \" hello react-ts-mobx\"), React.createElement(Foo, {\n      queue: store.queue,\n      refresh: store.refresh,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default observer(Add);","map":{"version":3,"sources":["/train/train-ticket/src/pages/Add/index.tsx"],"names":["React","observable","computed","action","observer","Store","fooProps","queue","refresh","console","log","Bar","Component","render","props","Foo","store","Add"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,UAAR,EAAiCC,QAAjC,EAA2CC,MAA3C,QAA6F,MAA7F;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,OAAO,cAAP,C,CAEA;;IACMC,K,sBAAN,MAAMA,KAAN,CAAY;AAAA;AAAA;;AAAA;AAAA;;AAMR,MAAcC,QAAd,GAA6B;AACzB,WAAO;AACHC,MAAAA,KAAK,EAAE,KAAKA,KADT;AAEHC,MAAAA,OAAO,EAAE,KAAKA;AAFX,KAAP;AAIH;;AAXO,C,+EACPP,U;;;;;WAA0B,C;;2EAC1BE,M;;;;;WAAiB,MAAW;AACzB,WAAKI,KAAL,IAAc,CAAd;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,KAAKH,KAAnC;AACH,K;;6DACAL,Q,+FAOL;;AAIA;IAEMS,G,GADLP,Q,WAAD,MACMO,GADN,SACkBX,KAAK,CAACY,SADxB,CAC2C;AACvCC,EAAAA,MAAM,GAAG;AAAA,UACEN,KADF,GACW,KAAKO,KADhB,CACEP,KADF;AAEL,WACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBA,KAAxB,CADJ;AAGH;;AANsC,C;;AAY3C;IAEMQ,G,GADLX,Q,WAAD,MACMW,GADN,SACkBf,KAAK,CAACY,SADxB,CAC2C;AACvCC,EAAAA,MAAM,GAAG;AAAA,wBACmB,KAAKC,KADxB;AAAA,UACEP,KADF,eACEA,KADF;AAAA,UACQC,OADR,eACQA,OADR;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,IAAI,EAAC,SAAb;AAAuB,MAAA,OAAO,EAAIA,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAID,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AATsC,C,cAW3C;;;AACA,MAAMS,KAAK,GAAG,IAAIX,KAAJ,EAAd;;AACA,MAAMY,GAAN,SAAkBjB,KAAK,CAACY,SAAxB,CAAiC;AAC7BC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADJ,EAEI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAIG,KAAK,CAACT,KAApB;AAA2B,MAAA,OAAO,EAAIS,KAAK,CAACR,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAOH;;AAT4B;;AAWjC,eAAeJ,QAAQ,CAACa,GAAD,CAAvB","sourcesContent":["import React from 'react';\nimport {observable, isArrayLike, computed, action, autorun, when, reaction,runInAction} from \"mobx\";\nimport {observer} from 'mobx-react';\nimport {Button} from 'antd-mobile';\nimport './index.scss';\n\n// 定义数据Store,用Mobx作为状态管理工具\nclass Store {\n    @observable queue:number = 1;\n    @action refresh = ():void => {\n        this.queue += 1;\n        console.log('this.queue -> ', this.queue);\n    }\n    @computed get fooProps():any {\n        return {\n            queue: this.queue,\n            refresh: this.refresh\n        };\n    }\n  }\n// ts组件接收父组件传递过来的数据必须定义接口类型,否则报错\ninterface BarProps{\n    queue :number\n}\n// @observer修饰类,Bar组件接受Foo组建传过来的queue属性\n@observer \nclass Bar extends React.Component<BarProps>{\n    render() {\n        const {queue} = this.props\n        return (\n            <div className=\"queue\">{queue}</div>\n        )\n    }\n}\ninterface FooProps {\n    queue: number,\n    refresh():void\n}\n// Foo组件接收来自Add组件的store数据\n@observer\nclass Foo extends React.Component<FooProps>{\n    render() {\n        const {queue,refresh} = this.props;\n        return (\n            <div>\n                <Button type=\"primary\" onClick = {refresh}>Refresh</Button>\n                <Bar queue = {queue} />\n            </div>\n        )\n    }\n}\n// 初始化store数据,传递给Foo组件\nconst store = new Store();\nclass Add extends React.Component{\n    render() {\n        return (\n            <div>\n                <h2 className=\"add\"> hello react-ts-mobx</h2>\n                <Foo queue = {store.queue} refresh = {store.refresh} />\n            </div>\n           \n        )\n    }\n}\nexport default observer(Add)"]},"metadata":{},"sourceType":"module"}